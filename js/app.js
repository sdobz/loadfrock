// Generated by CoffeeScript 1.6.3
(function() {
  var TestLoaderCtrl, WEBSOCKET_PORT, app;

  app = angular.module('LoadFrock', ['ui.bootstrap', 'dragger']);

  app.filter('bytes', function() {
    return function(bytes, precision) {
      var number, units;
      if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {
        return '-';
      }
      if (typeof precision === 'undefined') {
        precision = 1;
      }
      units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];
      number = Math.floor(Math.log(bytes) / Math.log(1024));
      return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];
    };
  });

  app.directive('autoGrow', function() {
    return function(scope, element, attr) {
      var $shadow, minHeight, paddingLeft, paddingRight, update;
      minHeight = element[0].offsetHeight;
      paddingLeft = element.css('paddingLeft');
      paddingRight = element.css('paddingRight');
      $shadow = angular.element('<div></div>').css({
        position: 'absolute',
        top: -10000,
        left: -10000,
        width: element[0].offsetWidth - parseInt(paddingLeft || 0) - parseInt(paddingRight || 0),
        fontSize: element.css('fontSize'),
        fontFamily: element.css('fontFamily'),
        lineHeight: element.css('lineHeight'),
        resize: 'none'
      });
      angular.element(document.body).append($shadow);
      update = function() {
        var times, val;
        times = function(string, number) {
          return Array(number + 1).join(string);
        };
        val = element.val().replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&/g, '&amp;').replace(/\n$/, '<br/>&nbsp;').replace(/\n/g, '<br/>').replace(/\s{2,}/g, function(space) {
          return times('&nbsp;', space.length - 1) + ' ';
        });
        $shadow.html(val);
        return element.css('height', Math.max($shadow[0].offsetHeight + 10, minHeight) + 'px');
      };
      element.bind('keyup keydown keypress change focus', update);
      return update();
    };
  });

  WEBSOCKET_PORT = 5577;

  app.service('MasterService', function($rootScope) {
    var MasterService, ws;
    ws = new WebSocket('ws://localhost:' + WEBSOCKET_PORT);
    MasterService = {
      connected: false,
      id: null,
      connection_actions: [],
      actions: {},
      register_action: function(action, callback) {
        return this.actions[action] = callback;
      },
      register_connection_action: function(callback) {
        if (!this.connected) {
          return this.connection_actions.push(callback);
        } else {
          return callback();
        }
      },
      run_action: function(action, data) {
        console.log('Action', action, data);
        if (this.connected) {
          if (data === void 0) {
            data = {};
          }
          data['action'] = action;
          return ws.send(JSON.stringify(data));
        }
      }
    };
    ws.onopen = function() {
      return $rootScope.$apply(function() {
        var connection_action, _i, _len, _ref, _results;
        MasterService.connected = true;
        _ref = MasterService.connection_actions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          connection_action = _ref[_i];
          _results.push(connection_action());
        }
        return _results;
      });
    };
    ws.onclose = function() {
      return $rootScope.$apply(function() {
        return MasterService.connected = false;
      });
    };
    ws.onmessage = function(msg) {
      var data;
      if (msg) {
        data = JSON.parse(msg.data);
        if (data['action']) {
          return $rootScope.$apply(function() {
            return MasterService.actions[data['action']](data);
          });
        }
      }
    };
    MasterService.register_action('set_id', function(data) {
      console.log('Given id: ', data['id']);
      return MasterService.id = data['id'];
    });
    MasterService.register_action('error', function(data) {
      return console.log('Got error ', data['error']);
    });
    return MasterService;
  });

  app.controller('FrockBodyCtrl', function($scope, MasterService) {
    $scope.connection = MasterService;
    $scope.show_test = true;
    return $scope.show_results = false;
  });

  app.service('SlaveService', function(MasterService) {
    var SlaveService;
    SlaveService = {
      slaves: {},
      sink_chooser: null,
      kill_slave: function(slave) {
        return MasterService.run_action('quit', {
          id: slave.id
        });
      },
      pick_sink: function(slave) {
        if (this.sink_chooser) {
          this.sink_chooser = null;
          return console.log('Setting slave(', this.sink_chooser, ')s sink to slave(', slave.id(')'));
        }
      }
    };
    MasterService.register_connection_action(function() {
      return MasterService.run_action('request_slaves');
    });
    MasterService.register_action('receive_slaves', function(data) {
      return angular.extend(SlaveService.slaves, data['slaves']);
    });
    MasterService.register_action('slave_connected', function(data) {
      if (!SlaveService.slaves[data['id']]) {
        SlaveService.slaves[data['id']] = {};
      }
      return angular.extend(SlaveService.slaves[data['id']], data);
    });
    MasterService.register_action('slave_disconnected', function(data) {
      if (SlaveService.slaves[data['id']]) {
        return delete SlaveService.slaves[data['id']];
      }
    });
    MasterService.register_action('slave_heartbeat', function(data) {
      if (!SlaveService.slaves[data['id']]) {
        SlaveService.slaves[data['id']] = {};
      }
      return angular.extend(SlaveService.slaves[data['id']], data);
    });
    return SlaveService;
  });

  app.controller('SlaveCtrl', function($scope, SlaveService) {
    return $scope.slave_service = SlaveService;
  });

  app.service('Test', function(MasterService) {
    var Test;
    Test = {
      name: '',
      runs: '',
      base: '',
      actions: [],
      save_alert_visible: false,
      save: function() {
        return MasterService.run_action('save_test', {
          test: Test
        });
      },
      add_action: function(index) {
        return Test.actions.splice(index, 0, {});
      },
      delete_action: function(index) {
        return Test.actions.splice(index, 1);
      }
    };
    MasterService.register_action('receive_test', function(data) {
      return angular.extend(Test, data['test']);
    });
    MasterService.register_action('save_successful', function() {
      console.log('Save ok');
      return Test.save_alert_visible = true;
    });
    return Test;
  });

  app.service('TestLoader', function(MasterService) {
    var TestLoader;
    TestLoader = {
      available_tests: [],
      load_available: function() {
        return MasterService.run_action('request_available_tests');
      },
      load_test: function(test_name) {
        return MasterService.run_action('request_test', {
          name: test_name
        });
      }
    };
    MasterService.register_action('receive_available_tests', function(data) {
      return TestLoader.available_tests = data['tests'];
    });
    return TestLoader;
  });

  app.controller('TestCtrl', function($scope, Test, TestLoader, TestRunner, ResultsService, $modal) {
    $scope.test = Test;
    $scope.test_runner = TestRunner;
    $scope.open_load_modal = function() {
      return $modal.open({
        templateUrl: 'load_modal.html',
        controller: TestLoaderCtrl
      }).result.then(function(test_name) {
        return TestLoader.load_test(test_name);
      });
    };
    return $scope.open_delete_action_modal = function(index) {
      var scope;
      scope = $scope.$new(true);
      scope.action = Test.actions[index];
      return $modal.open({
        templateUrl: 'action_delete.html',
        scope: scope
      }).result.then(function() {
        return Test.delete_action(index);
      });
    };
  });

  TestLoaderCtrl = function($scope, $modal, TestLoader, MasterService) {
    $scope.test_loader = TestLoader;
    TestLoader.load_available();
    return $scope.open_delete_test_modal = function(test_name) {
      var scope;
      scope = $scope.$new(true);
      scope.test_name = test_name;
      return $modal.open({
        templateUrl: 'test_delete.html',
        scope: scope
      }).result.then(function() {
        MasterService.run_action('delete_test', {
          test_name: test_name
        });
        return TestLoader.load_available();
      });
    };
  };

  app.service('TestRunner', function(MasterService, Test) {
    var TestRunner;
    TestRunner = {
      running: false,
      run: function() {
        TestRunner.running = true;
        return MasterService.run_action('run_test', {
          id: MasterService.id,
          test: Test
        });
      },
      stop: function() {
        return MasterService.run_action('stop_test', {
          id: MasterService.id,
          test: Test
        });
      }
    };
    MasterService.register_action('test_running', function(data) {
      return TestRunner.running = true;
    });
    MasterService.register_action('test_stopped', function(data) {
      return TestRunner.running = false;
    });
    return TestRunner;
  });

  app.service('ResultsService', function(MasterService) {
    var ResultService;
    ResultService = {
      runs: 0,
      start: 0,
      duration: 0,
      actions: []
    };
    MasterService.register_action('test_result', function(data) {
      return console.log('Got result ', data);
    });
    return ResultService;
  });

}).call(this);
